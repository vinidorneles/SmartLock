# =================================================================
# SMART LOCK SYSTEM - Docker Compose Configuration
# =================================================================
# 
# Este arquivo configura todos os serviços necessários para executar
# o Smart Lock System em ambiente de desenvolvimento ou produção
#
# Para usar:
# - Desenvolvimento: docker-compose up
# - Produção: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# =================================================================

version: '3.8'

networks:
  smartlock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # =================================================================
  # DATABASE - PostgreSQL
  # =================================================================
  postgres:
    image: postgres:15-alpine
    container_name: smartlock-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smartlock}
      POSTGRES_USER: ${POSTGRES_USER:-smartlock_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smartlock_dev_pass_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
      - ./backend/database/seeds:/docker-entrypoint-initdb.d/seeds:ro
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - smartlock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smartlock_user} -d ${POSTGRES_DB:-smartlock}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================================================================
  # CACHE - Redis
  # =================================================================
  redis:
    image: redis:7-alpine
    container_name: smartlock-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_pass_2025}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - smartlock-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # BACKEND API - Node.js
  # =================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: smartlock-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-smartlock_user}:${POSTGRES_PASSWORD:-smartlock_dev_pass_2025}@postgres:5432/${POSTGRES_DB:-smartlock}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_pass_2025}@redis:6379/0
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-jwt_secret_development_2025_change_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-8h}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-sistema@universidade.edu.br}
      SMTP_PASS: ${SMTP_PASS:-smtp_password}
      
      # Hardware
      HARDWARE_TIMEOUT: ${HARDWARE_TIMEOUT:-5000}
      DEFAULT_UNLOCK_DURATION: ${DEFAULT_UNLOCK_DURATION:-30}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: /app/logs/smartlock.log
      
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - ./backend:/app:ro
      - /app/node_modules
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - smartlock-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================================================================
  # WEB ADMIN - React Dashboard
  # =================================================================
  web-admin:
    build:
      context: ./web-admin
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:3001/ws}
    container_name: smartlock-web-admin
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${WEB_ADMIN_PORT:-3000}:80"
    networks:
      - smartlock-network
    volumes:
      - ./web-admin/nginx.conf:/etc/nginx/conf.d/default.conf:ro

  # =================================================================
  # REVERSE PROXY - Nginx
  # =================================================================
  nginx:
    image: nginx:alpine
    container_name: smartlock-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - web-admin
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - backend_logs:/var/log/nginx
    networks:
      - smartlock-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # MONITORING - Prometheus
  # =================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: smartlock-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - smartlock-network
    profiles:
      - monitoring

  # =================================================================
  # MONITORING - Grafana
  # =================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: smartlock-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_admin_2025}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    networks:
      - smartlock-network
    profiles:
      - monitoring

  # =================================================================
  # MONITORING - Node Exporter
  # =================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: smartlock-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - smartlock-network
    profiles:
      - monitoring

  # =================================================================
  # TESTING - Test Database
  # =================================================================
  postgres-test:
    image: postgres:15-alpine
    container_name: smartlock-postgres-test
    environment:
      POSTGRES_DB: smartlock_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - ./backend/database/setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
    ports:
      - "5433:5432"
    networks:
      - smartlock-network
    profiles:
      - testing

  # =================================================================
  # DEVELOPMENT - MailCatcher (for email testing)
  # =================================================================
  mailcatcher:
    image: sj26/mailcatcher:latest
    container_name: smartlock-mailcatcher
    restart: unless-stopped
    ports:
      - "${MAILCATCHER_SMTP_PORT:-1025}:1025"
      - "${MAILCATCHER_WEB_PORT:-1080}:1080"
    networks:
      - smartlock-network
    profiles:
      - development

  # =================================================================
  # HARDWARE SIMULATOR (for development/testing)
  # =================================================================
  hardware-simulator:
    build:
      context: ./hardware/simulator
      dockerfile: Dockerfile
    container_name: smartlock-hardware-simulator
    restart: unless-stopped
    environment:
      SIMULATOR_PORT: 8080
      API_BASE_URL: http://backend:3001
      CABINET_COUNT: 5
      LOCKERS_PER_CABINET: 8
    ports:
      - "${HARDWARE_SIMULATOR_PORT:-8080}:8080"
    networks:
      - smartlock-network
    profiles:
      - development
      - testing

# =================================================================
# ADDITIONAL CONFIGURATIONS
# =================================================================

# Para usar profiles específicos:
# docker-compose --profile monitoring up    # Inicia com monitoramento
# docker-compose --profile development up   # Inicia com tools de dev
# docker-compose --profile testing up       # Inicia com ambiente de teste

# Para production, use:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# Para desenvolvimento completo:
# docker-compose --profile development --profile monitoring up

# Para backup do banco:
# docker-compose exec postgres pg_dump -U smartlock_user smartlock > backup.sql

# Para restore do banco:
# docker-compose exec -T postgres psql -U smartlock_user smartlock < backup.sql

# Para ver logs em tempo real:
# docker-compose logs -f backend

# Para executar comandos no container:
# docker-compose exec backend npm run migrate
# docker-compose exec backend npm run seed

# Para limpar tudo:
# docker-compose down -v --remove-orphans